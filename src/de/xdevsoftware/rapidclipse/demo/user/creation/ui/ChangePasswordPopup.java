package de.xdevsoftware.rapidclipse.demo.user.creation.ui;

import java.util.Arrays;

import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Window;
import com.xdev.security.authentication.jpa.HashStrategy;
import com.xdev.ui.XdevButton;
import com.xdev.ui.XdevGridLayout;
import com.xdev.ui.XdevHorizontalLayout;
import com.xdev.ui.XdevPasswordField;
import com.xdev.ui.XdevView;

import de.xdevsoftware.rapidclipse.demo.user.creation.entities.User;

public class ChangePasswordPopup extends XdevView {

	private User selectedUser = null;
	private byte[] newPassword = null;

	public void setNewPassword(final byte[] newPassword) {
		this.newPassword = newPassword;
	}

	public byte[] getNewPassword() {
		return this.newPassword;
	}

	public User getSelectedUser() {
		return this.selectedUser;
	}

	public ChangePasswordPopup(final User user) {
		super();
		this.initUI();

		this.selectedUser = user;
	}

	/**
	 * Event handler delegate method for the {@link XdevButton} {@link #cmdConfirm}.
	 *
	 * @see Button.ClickListener#buttonClick(Button.ClickEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void cmdConfirm_buttonClick(final Button.ClickEvent event) {

		if(this.selectedUser != null)
		{
			//The old password from the given user.
			final byte[] oldPasswordUser = this.selectedUser.getPassword();
			final byte[] oldPasswordTextField = new HashStrategy.SHA2().hashPassword(this.txtOldPassword.getValue().getBytes());

			if(Arrays.equals(oldPasswordUser, oldPasswordTextField))
			{
				final byte[] newPassword = new HashStrategy.SHA2().hashPassword(this.txtNewPassword.getValue().getBytes());
				final byte[] repeatPassword = new HashStrategy.SHA2().hashPassword(this.txtRepeatPassword.getValue().getBytes());

				if(Arrays.equals(newPassword, repeatPassword))
				{
					//Sets the new password.
					this.setNewPassword(newPassword);
					//Closes the Popup-Window.
					((Window)this.getParent()).close();
				}
				else
				{
					Notification.show("Error", "The passwords do not match.", Type.ERROR_MESSAGE);
				}
			}
			else
			{
				Notification.show("Error", "The old password is not correct.", Type.ERROR_MESSAGE);
			}
		}
	}

	/**
	 * Event handler delegate method for the {@link XdevButton} {@link #cmdCancel}.
	 *
	 * @see Button.ClickListener#buttonClick(Button.ClickEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void cmdCancel_buttonClick(final Button.ClickEvent event)
	{
		((Window)this.getParent()).close();
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.gridLayout = new XdevGridLayout();
		this.txtOldPassword = new XdevPasswordField();
		this.txtNewPassword = new XdevPasswordField();
		this.txtRepeatPassword = new XdevPasswordField();
		this.horizontalLayout = new XdevHorizontalLayout();
		this.cmdCancel = new XdevButton();
		this.cmdConfirm = new XdevButton();

		this.txtOldPassword.setCaption("Old Password");
		this.txtNewPassword.setCaption("New Password");
		this.txtRepeatPassword.setCaption("Repeat Password");
		this.horizontalLayout.setMargin(new MarginInfo(false));
		this.cmdCancel.setCaption("Cancel");
		this.cmdConfirm.setCaption("Confirm");
		this.cmdConfirm.setStyleName("primary");

		this.cmdCancel.setSizeUndefined();
		this.horizontalLayout.addComponent(this.cmdCancel);
		this.horizontalLayout.setComponentAlignment(this.cmdCancel, Alignment.MIDDLE_CENTER);
		this.cmdConfirm.setSizeUndefined();
		this.horizontalLayout.addComponent(this.cmdConfirm);
		this.horizontalLayout.setComponentAlignment(this.cmdConfirm, Alignment.MIDDLE_CENTER);
		this.gridLayout.setColumns(1);
		this.gridLayout.setRows(5);
		this.txtOldPassword.setWidth(100, Unit.PERCENTAGE);
		this.txtOldPassword.setHeight(-1, Unit.PIXELS);
		this.gridLayout.addComponent(this.txtOldPassword, 0, 0);
		this.txtNewPassword.setWidth(100, Unit.PERCENTAGE);
		this.txtNewPassword.setHeight(-1, Unit.PIXELS);
		this.gridLayout.addComponent(this.txtNewPassword, 0, 1);
		this.txtRepeatPassword.setWidth(100, Unit.PERCENTAGE);
		this.txtRepeatPassword.setHeight(-1, Unit.PIXELS);
		this.gridLayout.addComponent(this.txtRepeatPassword, 0, 2);
		this.horizontalLayout.setSizeUndefined();
		this.gridLayout.addComponent(this.horizontalLayout, 0, 3);
		this.gridLayout.setComponentAlignment(this.horizontalLayout, Alignment.MIDDLE_RIGHT);
		this.gridLayout.setColumnExpandRatio(0, 10.0F);
		final CustomComponent gridLayout_vSpacer = new CustomComponent();
		gridLayout_vSpacer.setSizeFull();
		this.gridLayout.addComponent(gridLayout_vSpacer, 0, 4, 0, 4);
		this.gridLayout.setRowExpandRatio(4, 1.0F);
		this.gridLayout.setSizeFull();
		this.setContent(this.gridLayout);
		this.setSizeFull();

		this.cmdCancel.addClickListener(event -> this.cmdCancel_buttonClick(event));
		this.cmdConfirm.addClickListener(event -> this.cmdConfirm_buttonClick(event));
	} // </generated-code>

	// <generated-code name="variables">
	public XdevButton cmdCancel, cmdConfirm;
	public XdevHorizontalLayout horizontalLayout;
	public XdevPasswordField txtOldPassword, txtNewPassword, txtRepeatPassword;
	public XdevGridLayout gridLayout;
	// </generated-code>

}
